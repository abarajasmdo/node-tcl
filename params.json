{"name":"Node-tcl","tagline":"Node.js Tcl bindings","body":"node-tcl\r\n========\r\n\r\n[![npm version](https://img.shields.io/npm/v/tcl.svg)](https://www.npmjs.com/package/tcl)\r\n[![Build Status](https://travis-ci.org/nukedzn/node-tcl.svg)](https://travis-ci.org/nukedzn/node-tcl)\r\n[![Coverage Status](https://coveralls.io/repos/nukedzn/node-tcl/badge.svg)](https://coveralls.io/r/nukedzn/node-tcl)\r\n[![Dependency Status](https://david-dm.org/nukedzn/node-tcl.svg)](https://david-dm.org/nukedzn/node-tcl)\r\n[![devDependency Status](https://david-dm.org/nukedzn/node-tcl/dev-status.svg)](https://david-dm.org/nukedzn/node-tcl#info=devDependencies)\r\n\r\nNode.js Tcl bindings to execute Tcl commands using a native Tcl Interpreter.\r\n\r\n\r\n## Dependencies\r\n\r\n- Tcl development files (e.g. ```sudo apt-get install tcl-dev``` or ```sudo yum install tcl-devel```)\r\n\r\nThe build process will look for ```tclConfig.sh``` to identify Tcl include directory\r\nand linker flags. If you are using a Tcl version older than 8.5 or want to link to a specific\r\nTcl installation use the ```TCLCONFIG``` environment variable to override the default behaviour\r\n(e.g. ```export TCLCONFIG=/path/to/tclConfig.sh```).\r\n\r\n### Optional Dependencies\r\n\r\n- Tcl thread support (To enable async commands outside the main event loop)\r\n- C++ compiler with support for c++11 features (To enable async command queues outside the main event loop)\r\n\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install --save tcl\r\n```\r\n\r\n\r\n## Usage\r\n\r\n```js\r\nvar tcl = require( 'tcl' );\r\n```\r\n\r\n```js\r\nvar Tcl = require( 'tcl' ).Tcl;\r\nvar tcl = new Tcl();\r\n```\r\n\r\n### $( cmd ), cmdSync( cmd ), evalSync( cmd )\r\n\r\nExecute a Tcl command synchronously and returns a [Result](http://nukedzn.github.io/node-tcl/docs/Result.html).\r\n\r\n#### Parameters\r\n\r\n| Name | Type   | Description        |\r\n|------|--------|--------------------|\r\n| cmd  | String | Command to execute |\r\n\r\n\r\n#### Example\r\n\r\n```js\r\ntcl.$( 'info version' );\r\n```\r\n\r\n\r\n### $.(tcl-command)( ... )\r\n\r\nExecute a Tcl command using injected helper methods and returns a [Result](http://nukedzn.github.io/node-tcl/docs/Result.html).\r\n\r\n#### Example\r\n\r\n```js\r\ntcl.$.info( 'tclversion' );\r\ntcl.$.set( 'x', 10 );\r\ntcl.$.expr( 22, '/', '7.0' );\r\n```\r\n\r\n\r\n### load( module )\r\n\r\nLoad a Tcl module and refresh injected helper methods.\r\n\r\n#### Example\r\n\r\n```js\r\ntcl.load( 'libfoo.so' );\r\ntcl.$.foo();\r\n```\r\n\r\n\r\n### source( file )\r\n\r\nSource a Tcl script file and refresh injected helper methods.\r\n\r\n#### Example\r\n\r\n```js\r\ntcl.source( '/path/to/multiply.tcl' );\r\ntcl.$.multiply( 2, 3 );\r\n```\r\n\r\n\r\n### cmd( cmd, callback ), eval( cmd, callback )\r\n\r\nExecute a Tcl command asynchronously using a new worker thread (A new Tcl interpreter\r\ninstance will be created for each call).\r\n\r\n#### Parameters\r\n\r\n| Name     | Type   | Description        |\r\n|----------|--------|--------------------|\r\n| cmd      | String | Command to execute |\r\n| callback | [Callback](http://nukedzn.github.io/node-tcl/docs/Tcl.html#~cmdCallback) | Callback method to handle the response |\r\n\r\n#### Example\r\n\r\n```js\r\ntcl.cmd( 'info tclversion', function ( err, result ) {\r\n\tif ( err ) {\r\n\t\treturn console.log( err );\r\n\t}\r\n\r\n\tconsole.log( result.data() );\r\n} );\r\n\r\ntcl.eval( 'info commands', function ( err, result ) {\r\n\tif ( err ) {\r\n\t\treturn console.log( err );\r\n\t}\r\n\r\n\tconsole.log( result.toArray() );\r\n} );\r\n```\r\n\r\n\r\n### queue( cmd, callback )\r\n\r\nExecute a Tcl command asynchronously using a shared worker thread. A new Tcl interpreter\r\ninstance will be created for the worker thread but will be shared between calls.\r\n\r\n#### Parameters\r\n\r\n| Name     | Type   | Description        |\r\n|----------|--------|--------------------|\r\n| cmd      | String | Command to execute |\r\n| callback | [Callback](http://nukedzn.github.io/node-tcl/docs/Tcl.html#~cmdCallback) | Callback method to handle the response |\r\n\r\n#### Example\r\n\r\n``` js\r\ntcl.queue( 'set x 1' );\r\ntcl.queue( 'incr x', function ( err, result ) {\r\n\tif ( err ) {\r\n\t\treturn console.log( err );\r\n\t}\r\n\r\n\tconsole.log( result.data() ); // 2\r\n} );\r\n```\r\n\r\n\r\n\r\n## API Documentation\r\n\r\nJSDoc generated API documentation can be found at [http://nukedzn.github.io/node-tcl/docs/](http://nukedzn.github.io/node-tcl/docs/).\r\n\r\n\r\n## Contributing\r\n\r\nContributions are welcome through GitHub pull requests ([using fork & pull model](https://help.github.com/articles/using-pull-requests/#fork--pull)).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}